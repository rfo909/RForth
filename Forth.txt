(CREATE and DOES>)

(TODO: 

Implement CREATE and use it from COLON. Modify SEMICOLON to work with latest DictEntry

Possibly Implement a state store, where we put HERE and DictionaryHead in order to save a failing
compile from eating up a DictEntry worth of space, something like a manual MARK REGRET COMMIT

Move IMMEDIATE outside the colon def

For now, using the <DONE for the new SEMICOLON implementation

)






(----------------------------)
0 VARIABLE CREATE-HERE

: CREATE (--)
  IMMEDIATE
  GetNextWord

  (allocate dictionary entry)
  HERE => DE
  &NextWord readb 1+ => name#
  name# 6 add allot
  &NextWord DE name# memcpy

  (store 0 in code pointer)
  0 
	DE name# add !
  (store CONSTANT in status)
  3
    DE name# add CELL+ !
  (set next)
  &DictionaryHead @
	DE name# add CELL 2 mul add !
  (and update dict head)
  DE &DictionaryHead !

  (store HERE for DOES>)
  HERE CREATE-HERE !
;

: DOES>
  IMMEDIATE

  0 &CompileBuf writeb 
  HERE CREATE-HERE @ ne IF
    CREATE-HERE @ EmitNumber
  THEN
;


: <DONE (test)
  IMMEDIATE

  &IsCompiling readb not IF 
    "Not_in_compile_mode cr .str
    ret 
  THEN
  0x52 EmitByte  (ret)

  (locate top dict-entry)
  &DictionaryHead @ 
    => DE
  DE .str "_ok_ .str
  &CompileBuf readb 
    print# "_bytes .str cr
  (allocate code buffer)
  HERE => code
  &CompileBuf readb 1+ 
    => code#
  code# allot

  (copy code + length byte)
  &CompileBuf code code# 
    memcpy

  code 1+ (past length)
    DE dup readb add 1+ !

  ResetCompile
; 

: Array (n -- )
  IMMEDIATE 
  CREATE 
    CELLS allot 
  DOES> 
    CELLS add 
  <DONE ;

   
  
(DOES>'nt work yet)



####################################################
(Using buffers for string ops)

(----------------------------)
Dict Str
Str DictUse

&CompileBuf CONSTANT buf
&CompileBufEnd &CompileBuf sub CONSTANT Available

(=============================
NOTE: Using the compile
buffer is safe as long as 
inside running code. Its 
content may change when using
the REPL
=============================)

: clear (--) 0 buf writeb ;

: Length (-- n) buf readb ;

: add (str --)
  => str
  str readb => strLen
  Length => bufLen

  strLen Length add Available gt IF
    "Str:_Buffer_overflow .str 
    PANIC
  THEN
  (-- copy str into buf --)
  str 1+ (source)
    buf Length add 1+ (target)
    strLen (#bytes)
      memcpy
  (-- update buf length --)
  Length strLen add
    buf writeb
;  

(-- for debug --)
: .b buf Available ShowBuffer ;

DictClear
(172 bytes)


(----------------------------)



(----------------------------)
(TEST CODE)

: SClr () -> Str clear ;
: S+ (str) -> Str add ;
: S> (--ptr) -> Str buf ;
: S. S> .str ;

: test 
  SClr 
  "test_ S+ 
  "tust_ S+ 
  S. ;




