( the #END mark is used to cut the rest of the file off as input to the interpreter )
( --------------------------------------------------------------------------------- )

HERE CONSTANT beforeCode

0 &DebugFlag writeb



( --- example: solar charger --- )
( A low voltage, low power solar panel is coupled to a capacitor )
( Since the panel efficiency is best when the load isn't draining it, we only forward current when that cap is above a certain value)
( The current is forwarded as a pulse through an inductor, via a small resistor )
( When the current stops, the inductor discharges through a diode into the charge capacitor )
( When the voltage of the charge cap exceeds the battery voltage by a certain amount, we send a pulse from it to the battery )
( Unless the battery is full, then we wait until voltage drops below a certain threshold )

( If the input voltage on the solar panel capacitor is too low, then the microcontroller goes to deep sleep )
( The max duration of this sleep for atmega328p is 8 seconds )


(--- native stuff ---)

Dict Nat
Nat DictUse

: outDigital ( pin value -- ) drop drop	;
: inAnalog  ( pin ) drop		;
: inDigital  ( pin ) drop		;

: writeDigital ( pin value -- ) drop drop ;
: readDigital  ( pin -- value ) drop 1 ;
: readAnalog   ( pin -- value ) drop 512 ;

: pulseMicros  ( pin value -- ) drop drop ;

: sleep8s ( deep sleep 8 seconds ) ;
: sleepMillis ( millis -- ) ;

(end of Nat dictionary)
DictClear


(--- pins ---)

4 CONSTANT solarVoltagePin
5 CONSTANT battVoltagePin
6 CONSTANT chargeVoltagePin	(charge cap pumped up via inductor)
8 CONSTANT valveSolar
8 CONSTANT valveCharge
9 CONSTANT valveAref

10 CONSTANT ledCharge
11 CONSTANT ledInductor
12 CONSTANT ledFull

13 CONSTANT enableLoad


: Init
	solarVoltagePin Nat -> inAnalog
	battVoltagePin  Nat -> inAnalog
	chargeVoltagePin Nat -> inAnalog

	valveSolar 0 Nat -> outDigital
	valveCharge 0 Nat -> outDigital
	valveAref 1 Nat -> outDigital

	ledCharge 0 Nat -> outDigital
	ledInductor 0 Nat -> outDigital
	ledFull 0 Nat -> outDigital

	enableLoad 0 Nat -> outDigital
	;

: DeepSleep
	valveSolar 0 Nat -> writeDigital
	valveCharge 0 Nat -> writeDigital
	valveAref 0 Nat -> writeDigital

	ledCharge 0 Nat -> writeDigital
	ledInductor 0 Nat -> writeDigital

	enableLoad 0 Nat -> writeDigital

	Nat -> sleep8s
	;

( voltages given 0-1023 analog read value AND voltage divider setups )
634 CONSTANT solarVoltageOk
850 CONSTANT battVoltageMax
456 CONSTANT battVoltageLoadMin  (below this, kill external load, signaled via the enableLoad pin)
		
: SolarVoltage solarVoltagePin Nat -> readAnalog ;
: BattVoltage battVoltagePin Nat -> readAnalog ;
: ChargeVoltage chargeVoltagePin Nat -> readAnalog ;
: CanPowerLoad  BattVoltage battVoltageLoadMin ge ;

: ChargeVoltageOk (? does charge cap contain high enough voltage to charge battery ?)
	BattVoltage 125 add 
	ChargeVoltage
		gt
	;

: BatteryFull (? is battery voltage at max ?)
	BattVoltage battVoltageMax gt ;
	;


10000 CONSTANT sleepInterval  ( longer sleep after this number of cycles, to give battery rest )
sleepInterval VARIABLE sleepCountDown

: MakePause?
	sleepCountDown 0 eq IF 
		20000 Nat -> sleepMillis
		sleepInterval sleepCountDown !
	THEN
	sleepCountDown @ 1 sub sleepCountDown !
;



: Charge

	(compiles to 80 bytes :-)

	enableLoad CanPowerLoad Nat -> writeDigital 

	SolarVoltage solarVoltageOk lt IF 
		DeepSleep
		ret		(never called, as sleep restarts microcontroller)
	THEN

	MakePause?

	BatteryFull IF 
		ledFull 1 Nat -> writeDigital
		ret 
	THEN

	ledFull 0 Nat -> writeDigital
	
	ChargeVoltageOk IF
		valveCharge 5 1 Nat -> pulseMicros  (charge battery for 5 us)
		1 ledCharge Nat -> writeDigital
		0 ledInductor Nat -> writeDigital
		ret
	THEN

	0 ledCharge Nat -> writeDigital

	valveSolar 1 1 Nat -> pulseMicros ( charge inductor for 1 us)

	1 ledInductor Nat -> writeDigital

	;


: Main 
	Init 
	BEGIN
		1 Nat -> sleepMillis 
		Charge 
	1 AGAIN? ;


HERE CONSTANT afterCode

cr cr "#bytes_ .str afterCode beforeCode sub print#
cr cr



(start running)
\ Main

#END

