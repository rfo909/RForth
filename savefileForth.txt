

# Error codes
# --
<<<<<< EOF
#define ERR_UNKNOWN_OP        1
#define FUNC_csPop              2
#define FUNC_csPeek            3
#define FUNC_inpLocalVariableAdd 4
#define FUNC_csPush   5
#define FUNC_mapAddPos 6
#define FUNC_pcAddByte 7
#define FUNC_psAddChar 8
#define ERR_dsGet_not_number 9
#define ERR_dsPop_not_number  10
#define FUNC_dsPopValue 11
#define ERR_dsPeek_not_number 12
#define FUNC_inpAddToken 13
#define FUNC_inpAddChar 14
#define FUNC_dsPeekValue 15
#define FUNC_dsPushValue 16
#define ERR_INVALID_TYPE_CAST 17
>>>>>> EOF
	->line
		reject(line.trim.length==0)
		out(line.after(" ").before(" "))
/Strings


Strings.concat.length + Strings.length*3 - Strings.length*2
/space


# Generate String data for error codes
# --
	longest=0
	
	dict=Dict
	pos=0
	Strings->s
		pad=" ".times(40-s.length)
		println("#define " + s + " " + pad + pos)
	|
	
	println println println
	
	println("void printCode (int code) {")
	println("  switch(code) {")
	Strings->s
		println("    case " + s + ": {")
		println('      Serial.print(F("' + s + '"));')
		println("      return;")
		println("    }")
	|
	println("  }")
	println("}")
		
	
		
/PS




# OpCodes
# --
<<<<<< EOF
#define OP_EOF    0
#define OP_RET    1
#define OP_CALL    2
#define OP_JMP    3
#define OP_ZJMP    4
#define OP_CJMP    5
#define OP_POP    6
#define OP_DUP    7
#define OP_READ    8
#define OP_WRITE    9
#define OP_LSET    10
#define OP_LGET    11
#define OP_ADD    12
#define OP_SUB    13
#define OP_MUL    14
#define OP_DIV    15
#define OP_MOD    16
#define OP_NEG    17
#define OP_GT    18
#define OP_LT    19
#define OP_GE    20
#define OP_LE    21
#define OP_EQ    22
#define OP_NE    23
#define OP_L_AND    24
#define OP_L_OR    25
#define OP_L_NOT    26
#define OP_LSHIFT    27
#define OP_RSHIFT    28
#define OP_B_AND    29
#define OP_B_OR    30
#define OP_B_NOT    31

#define OP_LSET0      32
#define OP_LSET1      33
#define OP_LSET2      34
#define OP_LSET3      35
#define OP_LGET0      36
#define OP_LGET1      37
#define OP_LGET2      38
#define OP_LGET3      39

#define OP_AS_BYTE    40
#define OP_AS_INT     41
#define OP_AS_UINT    42
#define OP_AS_LONG    43
#define OP_AS_ULONG   44

#define OP_MILLIS     45
#define OP_EE_READ    46
#define OP_EE_WRITE   47
#define OP_EE_LENGTH  48

#define OP_NULL       49
#define OP_NOP        50

#define OP_AS_SYM     51
#define OP_AS_ADDR    52


>>>>>> EOF
	->line reject(line.trim.length==0) out(line.after(" ").before(" "))
/OpCodes

# PROGMEM-string for opcodes
# --
	OpCodes.concat("|")+"|$" => str
	println('const char OPNAMES[] PROGMEM = {"' + str + '"};')
/OPM	 


# Source bytes
# --
	Sys.savefile.dir.files->f
		type=f.name.afterLast(".")
		assert(type=="cpp" || type=="hh" || type=="ino")
		out (f.length)
	| _.sum
/sb

