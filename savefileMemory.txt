# Simulated byte oriented memory
# --
	P(1,2) as int => wordSize

	self.wordSize=wordSize
	self.memory = Std.Array(List)  # initially empty

	self.HERE = Lambda{
		self.memory.length
	}
	self.malloc = Lambda{
		P(1) as int => bytes
		Std.Data.for(0,bytes,1)->i self.memory.add(0)
	}

	self.writeByte = Lambda{
		P(1) as int => addr
		P(2) as int => value

		error(addr < 0 || addr >= self.HERE, "Invalid memory address: " + addr)

		self.memory.set(addr,Binary:WordByte(value,0))
	}

	self.readByte = Lambda{
		P(1) as int => addr

		error(addr < 0 || addr >= self.HERE, "Invalid memory address: " + addr)

		self.memory.get(addr)
	}

	self.writeChar = Lambda{
		P(1) as int => addr
		P(2) as String => char   # all program code is 7-bit printable characters a-zA-Z0-9 + some specials like +-*/!@

		error(char.length != 1, "Expected single character: " + char)
		
		value=char.toHexString("ISO-8859-1").parseInt(16)
		self.writeByte(addr, value)
	}

	self.readChar = Lambda {
		P(1) as int => addr
		value=self.readByte(addr)
		value.hex.fromHexString("ISO-8859-1")
	}

	self.writeWord = Lambda {
		P(1) as int => addr
		P(2) as int => value

		addrOffset=0
		Std.Data.each(self.wordSize-1, 0)->bytePos
			self.writeByte(addr + addrOffset, Binary:WordByte(value,bytePos))
			addrOffset=addrOffset+1
	}

	self.readWord = Lambda {
		P(1) as int => addr

		addrOffset=0
		bits=""
		Std.Data.each(self.wordSize-1, 0)->bytePos
			bits=bits + self.readByte(addr + addrOffset).bin(8)
			addrOffset=addrOffset+1
		|
		bits.parseInt(2)
	}

	self.dump = Lambda {
		P(1,0) => start
		P(2,self.HERE) => end
		Std.Data.for(start,end,1)->addr
			value=self.readByte(addr)
			char=""
			if (value < 128) char=Sys.uchar(value).printable.esc
			report(addr, "0x"+addr.hex(4), value, "0x"+value.hex(2), char)
	}
/class Memory



# Memory test
# --
	m=Memory(2)
	m.malloc(10)
	#Lib:ShowRows(m.dump)
	#println
	m.writeByte(1,23)
	Lib:ShowRows(m.dump)
	println
	println("Writing word 0xcafe to addr 6")
	m.writeWord(6,"cafe".parseInt(16))
	Lib:ShowRows(m.dump)
	println
	println("Read back word: " + m.readWord(6).hex(4))

	println
	println("Write char 't' to pos 8")
	m.writeChar(8,"t")
	println("Read back char: " + m.readChar(8))

	println("Write char TAB to pos 9")
	m.writeChar(9,"^t".unEsc)

	println
	Lib:ShowRows(m.dump)
	println
	
//Test




