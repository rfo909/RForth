# Interfacing 23LCV512 chip over SPI - 64KBytes SRAM
# --------------------------------------------------
# 2022-05-28 RFO 
#
# Slave select pin: Arduino pin9 
# PB1 on Arduino Nano
#

: Reg! ( :byte =clearMask :byte =valueMask :int =addr -- )
	addr sys:read clearMask ! &
		valueMask clearMask & | addr sys:write ;

const PORTB 0x25 ;
const DDRB 0x24 ;

: $high ( :uint =val )  val 8 >> ;
: $low  :byte ;

const MASK b0000_0010 ;

# slave select enable / disable
: SRAM.SS! ( :bool =enable ) 
	#
	MASK =value
	enable if{ 0 =value } # SS low = enable
	MASK MASK DDRB Reg!
	MASK value PORTB Reg!
	;


const SRAM.mw B00000001 ;   # mode write op
const SRAM.mr B00000101 ;   # mode read op
const SRAM.mseq B01000000 ;  # mode sequential

const SRAM.opw  B00000010 ; # write op
const SRAM.opr  B00000011 ; # read op

: SRAM.start 
	0 SRAM.SS!

	# 1=msbFirst 0=spiMode 
	1 0 spi:begin
 
 	# program mseq
	1 SRAM.SS! 
	  SRAM.mw   spi:transfer =
	  SRAM.mseq spi:transfer =
	0 SRAM.SS!
;

: SRAM.w0 ( :uint =addr ) 
	1 SRAM.SS!
	SRAM.opw spi:transfer =
	addr $high spi:transfer =
	addr $low spi:transfer =
;

: SRAM.w ( :byte =value )
	value spi:transfer =
;

: SRAM.r0 ( :uint =addr )
	1 SRAM.SS!
	SRAM.opr  spi:transfer =
	addr $high spi:transfer =
	addr $low spi:transfer =
;

: SRAM.r
	0xFF spi:transfer
;

: SRAM.rwdone
	0 SRAM.SS!
;


: SRAM.end
	spi:end
;



# Usage
# -----------
#
# SRAM.start
#
# Write from address
# --
# 0 =addr
# addr SRAM.w0
#
# <data> SRAM.w
#  :
#
# SRAM.rwdone
#
# Read from address
# --
# 0 =addr
# addr SRAM.r0
#
# SRAM.r =data
#  :
#
# SRAM.rwdone
#
# SRAM.end

: test 
  SRAM.start
  0 SRAM.w0
  101 SRAM.w
  202 SRAM.w
  203 SRAM.w
  SRAM.rwdone
  0 SRAM.r0
  SRAM.r 
  SRAM.r
  SRAM.r
  SRAM.rwdone
  SRAM.end
  ;
  
# stats
# ps: 147 of 250
# pc: 178 of 350



