Linking?
--------
Tried implementing use of symbols inline in code for identification of words
to call with OP_CALL. 

Although the implementation wasn't completely debugged, it became clear that the
code grew a lot, but worse, that the frequent use of other words would mean a
lot of runtime overhead, as compared to compile-time overhead now.

Why?
----
The reason for wanting linking, was in order to move sets of words from one location to
another, making the operation independent of location or rather offset on device. 

Problems
--------
The first problem is that this is messy as hell, and will give rise to errors where
some word gets moved, but some of its' dependencies are not. 

Using lookups at runtime of course has an overhead that slows down execution.


Alternative
-----------
Keeping the existing "linking" as part of compilation, what we effectively do is create
a set of data that belongs together. We call this a

	dictionary
	
Dictionaries as units of code (!!)
----------------------------------
Dictionaries are central to the real Forth, and in RForth, we use this term to identify
a set of words and symbols, that not only depend on each other, but also on a well defined
stack of dictionaries, possibly stored at different physical locations (devices), but each
living inside a 0-based byte-space.

This means the dictionaries are the units of code that we move between devices, not
individual words. 

A dictionary, as of now, contains:

	- a persistent string storage
	- a map of symbols stored there
	- a persistent binary storage
	- a map of words, combining strPos with code-starts
	
	All code sequences for words must end with EOF (value 0)
	All strings must also end with '\0'
	
	There is no reason to change this, except perhaps that the "on-file" format (sd-card?)
	may require certain adaptions. Possibly, with GIGABYTES of storage (sd) we may create
	lookup-structures for symbols and functions, for speed.

	
Using local memory as cache for word bodies is another option,
	
	
Base dictionaries
-----------------
A few base dictionaries will typically exist in PROGMEM. These must be encoded so that 
we can export one at a time as hex text, which we append to the end of PROGMEM_DATA array.

Dictionaries typically must have names, and based on current microcontroller, we may include
one and exclude others, for example defining hardware registers for different Arduino models.

Dictionary stack
----------------- 
This means we need to get a dictionary stack up and running, with means for unique identification
of each dictionary, and for looking up symbols and compiled words, and executing words 
calling other words in lower dictionaries. 

There will never be calls UP to newer dictionaries, and for consistency and ease of reasoning
about code, we can not allow redefining words that are already defined in lower dictionaries.

Dictionary sets
---------------
Multiple dictionary stack configurations will naturally need to be created, as the code
space grows.

This means that if dictionary A is created on top of dictionary X, and then another,
dictionary B is also created on top of X, then we have a branch, where we will 
push either A or B on the DictStack, and develop further from there. 



OP_CALL modification
--------------------
For this to work, the OP_CALL will need to be changed, from finding a simple long value, to 
an ADDR object.

The ADDR will in turn need to be modified, to support a (deep) stack of dictionaries. Possibly
a separate structure will be needed to keep track of where the individual dictionaries are
stored, instead of encoding location into the ADDR control bits.


