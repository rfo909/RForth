2025-08 v3

2025-10-17

- Implement native functions for i2c (later SPI and Serial)

- Implement breakable loops, like BEGIN ... cond BREAK ... cond BREAK ... AGAIN
	(or create conditional return op: ret?)

- Add external 24FC256-I/P EEPROM, save code to it via "screens" editor (in firmware)

- Create a disassembler (code length byte at index -1 already in place) (?)

- Define a way to both automatically run a certain word, and some startup condition to enter interactive 
	mode instead, like a pin reading HIGH or LOW

- Consider moving interactive REPL to SoftSerial at 9600 baud or lower (?) to free up hardware serial


Local variables
---------------
Prefer Forth words to be four to five lines only

=> name


# Use a single string for local variable names, separated by 0
# Position in list == cget position

.............................|

Dict Buf
	# clear extra-dictionary
	# make active

: clear (buf -- )
  0 swap writeb ;

: addByte (byte buf)
  => buf => b
  buf readb => len 
  b buf len add 1+ writeb
  len 1+ buf writeb ;

: addWord (word buf)
  => buf => w
  w 8 >> 0xFF andb 
    buf addByte
  w 0xFF andb buf addByte ;

Dict EE

0 VARIABLE i2cAddr
&CompileBuf CONSTANT buf

: W NATIVE I2C.MasterWrite ;
: WW NATIVE I2C.MasterWWait ;

: initLine (memPos next)
  => next => memPos
  buf -> Buf clear
  memPos buf -> Buf addWord
  next buf -> Buf addWord
  NATIVE I2C.MasterWrite
  NATIVE I2C.MasterWWait ;
  
DictClear

  
-----------------------------| 

: EEInit P( lines i2cAddr ) 


Saving source
-------------
When there are changes to the firmware, addresses in flash change, and we can no longer restore an
image of the Forth heap successfully. For this purpose, we need instead to recompile and
execute the original code, and create a new image.

To do this, the code must be saved to the EEPROM. This is where some version of a "screen"
editor comes in. 



